import { BigNumber } from "ethers"
import { ethers } from "hardhat"
import fs from 'fs'
import { e18, promiseSequenceMap, sumBigNumbers, toDecimal } from "./utils";
import { affectedUsers } from "./affectedUsers/affectedUsers";
import { AllVaultNames } from "./types";
import { vaultData } from "./vaultData";

const startBlock = 0
const endBlock = 25345003 // Block before first attack execution


async function main() {
    let csvLines = [
        `Vault,Vault Address,Discord Tag,Tg Tag,User Address,Shares at time of Exploit,Token at time of Exploit`
    ]

    // Iterate Vaults
    await promiseSequenceMap(
        AllVaultNames,
        async (vaultName) => {
            
            const vaultInfo = vaultData[vaultName]
            if (vaultInfo == null) return

            console.log(`VAULT: ${vaultName}`)

            const users = affectedUsers[vaultName]

            const vault = await new ethers.Contract(vaultInfo.address, vaultInfo.abi, ethers.provider)
            
            // Iterate Users
            await promiseSequenceMap(
                Object.entries(users),
                async ([userAddress, userAdditionalInfo]) => {
                    console.log({
                        vaultName,
                        userAddress,
                        userAdditionalInfo
                    })

                    const receiveSharesTokenFilter = vault.filters.Transfer(null, userAddress)
                    const sendSharesTokenFilter = vault.filters.Transfer(userAddress, null)
                    const receiveSharesTokenTxs = await vault.queryFilter(receiveSharesTokenFilter, startBlock, endBlock)
                    const sendSharesTokenTxs = await vault.queryFilter(sendSharesTokenFilter, startBlock, endBlock)

                    const sharesReceived = receiveSharesTokenTxs.length > 0 ?
                        sumBigNumbers(receiveSharesTokenTxs.map((tx) => BigNumber.from(tx.data))) :
                        e18(0)

                    const sharesSent = sendSharesTokenTxs.length > 0 ?
                        sumBigNumbers(sendSharesTokenTxs.map((tx) => BigNumber.from(tx.data))) :
                        e18(0)

                    const sharesAtTimeOfExploit = sharesReceived.sub(sharesSent)
                    const tokensAtTimeOfExploit = sharesAtTimeOfExploit.mul(vaultInfo.preExploitFullPricePerShare).div(e18(1))

                    console.log({
                        sharesReceived: toDecimal(sharesReceived),
                        sharesSent: toDecimal(sharesSent),
                        sharesAtTimeOfExploit: toDecimal(sharesAtTimeOfExploit),
                        tokensAtTimeOfExploit: toDecimal(tokensAtTimeOfExploit),
                    }) 

                    csvLines.push(`${vaultName},${vaultInfo.address.toString()},${userAdditionalInfo.discordTag || ''},${userAdditionalInfo.tgTag || ''},${userAddress.toString()},${toDecimal(sharesAtTimeOfExploit)},${toDecimal(tokensAtTimeOfExploit)}`)
                }
            )       
        }
    )

    const csvOutput = csvLines.join('\n')
    const filename = `./output.csv`
    fs.writeFileSync(filename, csvOutput)
};

main()
    .then(() => process.exit(0))
    .catch(error => {
        console.error(error);
        process.exit(1);
    });
